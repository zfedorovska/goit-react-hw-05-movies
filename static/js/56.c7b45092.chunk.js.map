{"version":3,"file":"static/js/56.c7b45092.chunk.js","mappings":"qSAAMA,EAAW,+BACXC,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,qCACaC,IACxCY,MAAK,SAAAP,GAAQ,OAAIA,EAASQ,WAGvB,SAASC,EAAeC,GAC7B,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,oBACQf,EADR,oBAKxB,SAASgB,EAAiBD,GAC/B,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,4BACgBf,EADhB,oBAE3BY,MAAK,SAAAP,GAAQ,OAAIA,EAASY,QAGvB,SAASC,EAAiBH,GAC/B,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,4BACgBf,EADhB,2BAE3BY,MAAK,SAAAP,GAAQ,OAAIA,EAASQ,WAGvB,SAASM,EAAyBC,GACvC,OAAOnB,EAAuB,GAAD,OACxBF,EADwB,iCACSC,EADT,kBACsBoB,EADtB,2BAE3BR,MAAK,SAAAP,GAAQ,OAAIA,EAASQ,a,wGCpC9B,EAAkC,gCAAlC,EAA0E,sBAA1E,EAA+G,6B,SCIhG,SAASQ,IACtB,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACJF,EAAaG,IAAI,UACnBC,EAAAA,GAC4BJ,EAAaG,IAAI,UAC1CnB,KAAKc,KAET,CAACE,IAiBJ,OACE,4BACE,gBAAKK,UAAWC,EAAhB,UACE,kBAAMC,SAde,SAAAC,GACzBA,EAAMC,iBACqB,KAAvBd,EAAYe,QAIhBV,EAAaW,IAAI,QAAShB,GAC1BM,EAAgBD,GAChBI,EAAAA,GAAmCT,GAAaX,KAAKc,IALnDc,MAAM,uBAWJ,WACE,kBACEP,UAAWC,EACXO,KAAK,OACLC,YAAY,GACZC,KAAK,SACLC,MAAOrB,EACPsB,SAzBsB,SAAAT,GAC9BZ,EAAeY,EAAMU,cAAcF,MAAMG,mBA0BnC,mBAAQd,UAAWC,EAAqBO,KAAK,SAA7C,yBAKHhB,GACCA,EAAOuB,KAAI,gBAAGjC,EAAH,EAAGA,GAAIkC,EAAP,EAAOA,MAAON,EAAd,EAAcA,KAAd,OACT,yBACE,UAAC,KAAD,CAAMO,GAAE,UAAKnC,GAAb,UACGkC,EACAN,MAHI5B","sources":["services/movies-api.js","webpack://goit-react-hw-05-movies/./src/views/Movies/Movies.module.css?58de","views/Movies/Movies.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst API = 'bd5e1631ed489de1dc8ff7eb8202de51';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrendingMovies() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/all/day?api_key=${API}`\n  ).then(response => response.results);\n}\n\nexport function fetchMovieById(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}?api_key=${API}&language=en-US`\n  );\n}\n\nexport function fetchCreditsById(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API}&language=en-US`\n  ).then(response => response.cast);\n}\n\nexport function fetchReviewsById(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API}&language=en-US&page=1`\n  ).then(response => response.results);\n}\n\nexport function fetchMoviesBySearchQuery(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${API}&query=${query}&language=en-US&page=1`\n  ).then(response => response.results);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"searchContainer\":\"Movies_searchContainer__x1BaU\",\"input\":\"Movies_input__sVctr\",\"searchButton\":\"Movies_searchButton__N5YVg\"};","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport * as moviesAPI from '../../services/movies-api';\nimport styles from './Movies.module.css';\n\nexport default function MoviesView() {\n  const [searchValue, setSearchValue] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    if (searchParams.get('query')) {\n      moviesAPI\n        .fetchMoviesBySearchQuery(searchParams.get('query'))\n        .then(setMovies);\n    }\n  }, [searchParams]);\n\n  const handleSearchValueChange = event => {\n    setSearchValue(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSearchSubmit = event => {\n    event.preventDefault();\n    if (searchValue.trim() === '') {\n      alert('Input search value');\n      return;\n    }\n    searchParams.set('query', searchValue);\n    setSearchParams(searchParams);\n    moviesAPI.fetchMoviesBySearchQuery(searchValue).then(setMovies);\n  };\n\n  return (\n    <div>\n      <div className={styles.searchContainer}>\n        <form onSubmit={handleSearchSubmit}>\n          <input\n            className={styles.input}\n            type=\"text\"\n            placeholder=\"\"\n            name=\"search\"\n            value={searchValue}\n            onChange={handleSearchValueChange}\n          />\n          <button className={styles.searchButton} type=\"submit\">\n            Search\n          </button>\n        </form>\n      </div>\n      {movies &&\n        movies.map(({ id, title, name }) => (\n          <li key={id}>\n            <Link to={`${id}`}>\n              {title}\n              {name}\n            </Link>\n          </li>\n        ))}\n    </div>\n  );\n}\n"],"names":["BASE_URL","API","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","then","results","fetchMovieById","id","fetchCreditsById","cast","fetchReviewsById","fetchMoviesBySearchQuery","query","MoviesView","useState","searchValue","setSearchValue","movies","setMovies","useSearchParams","searchParams","setSearchParams","useEffect","get","moviesAPI","className","styles","onSubmit","event","preventDefault","trim","set","alert","type","placeholder","name","value","onChange","currentTarget","toLowerCase","map","title","to"],"sourceRoot":""}